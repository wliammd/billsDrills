[["moremodeling.html", "Chapter 18 More modeling 18.1 Split target from predictors 18.2 Multiple preprocessing methods", " Chapter 18 More modeling library(tidyverse) library(rpart) library(caret) ## Loading required package: lattice ## ## Attaching package: &#39;caret&#39; ## The following object is masked from &#39;package:purrr&#39;: ## ## lift 18.1 Split target from predictors This example shows how to generate some missing values, and to use imputation overcome these. data(&quot;mtcars&quot;) set.seed(42) mtcars[sample(1:nrow(mtcars), 10), &quot;hp&quot;] &lt;- NA Y &lt;- mtcars$mpg X &lt;- mtcars[,2:4] # model &lt;- train(X,Y) #This fails, because of the NAs. Try imputation. median_model &lt;- train( X, Y, preProcess = &quot;medianImpute&quot; ) ## note: only 2 unique complexity parameters in default grid. Truncating the grid to 2 . print(median_model) ## Random Forest ## ## 32 samples ## 3 predictor ## ## Pre-processing: median imputation (3) ## Resampling: Bootstrapped (25 reps) ## Summary of sample sizes: 32, 32, 32, 32, 32, 32, ... ## Resampling results across tuning parameters: ## ## mtry RMSE Rsquared MAE ## 2 2.758439 0.8106146 2.260273 ## 3 2.729423 0.8123802 2.224138 ## ## RMSE was used to select the optimal model using the smallest value. ## The final value used for the model was mtry = 3. 18.2 Multiple preprocessing methods Zach Mayer offers the following cheat sheet for preprocessing: Start with median imputation (if you’re using it) Try KNN imputation if data NOT missing at random For linear models (lm, glm, glmnet) always center and scale Tree-based models (random forest, gbm) don’t need much preprocessing data(&quot;mtcars&quot;) set.seed(42) mtcars[sample(1:nrow(mtcars), 10), &quot;hp&quot;] &lt;- NA Y &lt;- mtcars$mpg X &lt;- mtcars[,2:4] # missing at random set.seed(42) model &lt;- train( X, Y, method = &quot;glm&quot;, preProcess = c(&quot;medianImpute&quot;, &quot;center&quot;, &quot;scale&quot;) ) print(min(model$results$RMSE)) ## [1] 3.079732 set.seed(42) model &lt;- train( X, Y, method = &quot;glm&quot;, preProcess = c(&quot;medianImpute&quot;, &quot;center&quot;, &quot;scale&quot;, &quot;pca&quot;) ) print(min(model$results$RMSE)) # with pca applied ## [1] 3.03581 "]]
