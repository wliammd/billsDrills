[
["factorpractice.html", "Chapter 5 Factor Practice 5.1 The basic structure 5.2 Not all nominal data is a factor 5.3 Making variables into factors 5.4 Inspecting factors", " Chapter 5 Factor Practice 5.1 The basic structure Let’s say that you have 100 cups of sizes small, medium, or large. cups &lt;- c(&quot;small&quot;, &quot;medium&quot;, &quot;large&quot;) set.seed(2020) manyCups &lt;- sample(cups, size = 100, replace = TRUE) table(manyCups) ## manyCups ## large medium small ## 25 39 36 Note that table() renders these in alphabetical order. It’s usually more useful to render them in order of magnitude by setting levels. sizesCups &lt;- factor(manyCups, levels = c(&quot;small&quot;, &quot;medium&quot;, &quot;large&quot;)) sizesCups ## [1] large medium small small medium medium small small medium medium ## [11] medium small medium large medium small medium medium medium large ## [21] medium large medium small large medium medium medium large medium ## [31] large large small small small medium large small small medium ## [41] large small small small large small small large medium medium ## [51] medium small large medium small medium large small small medium ## [61] small medium large medium large medium medium small large medium ## [71] large small medium large medium medium medium small small small ## [81] large medium medium small small medium small small medium small ## [91] large small large small small large large large medium small ## Levels: small medium large table(sizesCups) ## sizesCups ## small medium large ## 36 39 25 The forcats package is designed to work with factors. Although I use it frequently, I haven’t generalized the ideas, or internalized them. That’s a mistake. The RStudio cheat sheet is a nice place to begin with this: https://rstudio.com/resources/cheatsheets/. Let’s use my favorite starwars illustration to help illustrate some of forcats’s usefulness. starwars %&gt;% filter(!is.na(species)) %&gt;% count(species, sort = TRUE) ## # A tibble: 37 x 2 ## species n ## &lt;chr&gt; &lt;int&gt; ## 1 Human 35 ## 2 Droid 6 ## 3 Gungan 3 ## 4 Kaminoan 2 ## 5 Mirialan 2 ## 6 Twi&#39;lek 2 ## 7 Wookiee 2 ## 8 Zabrak 2 ## 9 Aleena 1 ## 10 Besalisk 1 ## # … with 27 more rows The forcats cheat sheet contains a bunch of often-used functions that I rarely take the time to think about. 5.2 Not all nominal data is a factor Note that many categorical variables are not encoded as factors. This has certain advantages, since levels can sometimes be seen as complicating ballast that is dragged around by the variable. See, so instance, that the species variable is not encoded as a factor: class(starwars$species) ## [1] &quot;character&quot; 5.3 Making variables into factors The factor() function (or the as_factor() function) make a variable into a factor and allow the assignation of levels. class(factor(starwars$species)) ## [1] &quot;factor&quot; The levels() function is useful for returning these levels: levels(factor(starwars$species)) ## [1] &quot;Aleena&quot; &quot;Besalisk&quot; &quot;Cerean&quot; &quot;Chagrian&quot; ## [5] &quot;Clawdite&quot; &quot;Droid&quot; &quot;Dug&quot; &quot;Ewok&quot; ## [9] &quot;Geonosian&quot; &quot;Gungan&quot; &quot;Human&quot; &quot;Hutt&quot; ## [13] &quot;Iktotchi&quot; &quot;Kaleesh&quot; &quot;Kaminoan&quot; &quot;Kel Dor&quot; ## [17] &quot;Mirialan&quot; &quot;Mon Calamari&quot; &quot;Muun&quot; &quot;Nautolan&quot; ## [21] &quot;Neimodian&quot; &quot;Pau&#39;an&quot; &quot;Quermian&quot; &quot;Rodian&quot; ## [25] &quot;Skakoan&quot; &quot;Sullustan&quot; &quot;Tholothian&quot; &quot;Togruta&quot; ## [29] &quot;Toong&quot; &quot;Toydarian&quot; &quot;Trandoshan&quot; &quot;Twi&#39;lek&quot; ## [33] &quot;Vulptereen&quot; &quot;Wookiee&quot; &quot;Xexto&quot; &quot;Yoda&#39;s species&quot; ## [37] &quot;Zabrak&quot; levels() can also be used to set the levels. And additional structure can be observed with unclass(). Note that the default level order in species is alphabetical. unclass(factor(starwars$species)) ## [1] 11 6 6 11 11 11 11 6 11 11 11 11 34 11 24 12 11 11 36 11 11 6 31 11 11 ## [26] 18 11 11 8 26 11 21 11 10 10 10 NA 30 7 NA 11 37 32 32 33 35 29 11 3 20 ## [51] 37 27 13 23 16 4 11 11 11 9 17 17 11 11 11 11 5 2 15 15 11 1 6 25 19 ## [76] 28 14 34 11 NA 22 11 11 11 6 NA 11 ## attr(,&quot;levels&quot;) ## [1] &quot;Aleena&quot; &quot;Besalisk&quot; &quot;Cerean&quot; &quot;Chagrian&quot; ## [5] &quot;Clawdite&quot; &quot;Droid&quot; &quot;Dug&quot; &quot;Ewok&quot; ## [9] &quot;Geonosian&quot; &quot;Gungan&quot; &quot;Human&quot; &quot;Hutt&quot; ## [13] &quot;Iktotchi&quot; &quot;Kaleesh&quot; &quot;Kaminoan&quot; &quot;Kel Dor&quot; ## [17] &quot;Mirialan&quot; &quot;Mon Calamari&quot; &quot;Muun&quot; &quot;Nautolan&quot; ## [21] &quot;Neimodian&quot; &quot;Pau&#39;an&quot; &quot;Quermian&quot; &quot;Rodian&quot; ## [25] &quot;Skakoan&quot; &quot;Sullustan&quot; &quot;Tholothian&quot; &quot;Togruta&quot; ## [29] &quot;Toong&quot; &quot;Toydarian&quot; &quot;Trandoshan&quot; &quot;Twi&#39;lek&quot; ## [33] &quot;Vulptereen&quot; &quot;Wookiee&quot; &quot;Xexto&quot; &quot;Yoda&#39;s species&quot; ## [37] &quot;Zabrak&quot; 5.4 Inspecting factors We see that there are a ton of unique species in this list. fct_count(starwars$species, sort = TRUE) ## # A tibble: 38 x 2 ## f n ## &lt;fct&gt; &lt;int&gt; ## 1 Human 35 ## 2 Droid 6 ## 3 &lt;NA&gt; 4 ## 4 Gungan 3 ## 5 Kaminoan 2 ## 6 Mirialan 2 ## 7 Twi&#39;lek 2 ## 8 Wookiee 2 ## 9 Zabrak 2 ## 10 Aleena 1 ## # … with 28 more rows fct_unique(factor(starwars$species)) ## [1] Aleena Besalisk Cerean Chagrian Clawdite ## [6] Droid Dug Ewok Geonosian Gungan ## [11] Human Hutt Iktotchi Kaleesh Kaminoan ## [16] Kel Dor Mirialan Mon Calamari Muun Nautolan ## [21] Neimodian Pau&#39;an Quermian Rodian Skakoan ## [26] Sullustan Tholothian Togruta Toong Toydarian ## [31] Trandoshan Twi&#39;lek Vulptereen Wookiee Xexto ## [36] Yoda&#39;s species Zabrak ## 37 Levels: Aleena Besalisk Cerean Chagrian Clawdite Droid Dug ... Zabrak "]
]
