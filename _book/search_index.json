[["regex.html", "Chapter 14 Regular expressions 14.1 Seeking patterns", " Chapter 14 Regular expressions 14.1 Seeking patterns I’m not very good at manipulating regular expressions, so a page to practice manipulating them seems like a good idea. The RStudio cheat sheet is a nice place to start: https://rstudio.com/resources/cheatsheets/ Or Hadley Wickham and Garrett Grolemund’s R4DS chapter on strings: https://r4ds.had.co.nz/strings.html string &lt;- c(&quot;Hiphopopotamus&quot;, &quot;Rhymenoceros&quot;, &quot;time for bottomless lyrics&quot;) pattern &lt;- &quot;t.m&quot; grep(pattern, string) ## [1] 1 3 grep(pattern, string, value = TRUE) ## [1] &quot;Hiphopopotamus&quot; &quot;time for bottomless lyrics&quot; grepl(pattern, string) ## [1] TRUE FALSE TRUE stringr::str_detect(string, pattern) ## [1] TRUE FALSE TRUE regexpr(pattern, string) ## [1] 10 -1 1 ## attr(,&quot;match.length&quot;) ## [1] 3 -1 3 ## attr(,&quot;index.type&quot;) ## [1] &quot;chars&quot; ## attr(,&quot;useBytes&quot;) ## [1] TRUE # This finds the starting position and the length of the 1st match gregexpr(pattern, string) ## [[1]] ## [1] 10 ## attr(,&quot;match.length&quot;) ## [1] 3 ## attr(,&quot;index.type&quot;) ## [1] &quot;chars&quot; ## attr(,&quot;useBytes&quot;) ## [1] TRUE ## ## [[2]] ## [1] -1 ## attr(,&quot;match.length&quot;) ## [1] -1 ## attr(,&quot;index.type&quot;) ## [1] &quot;chars&quot; ## attr(,&quot;useBytes&quot;) ## [1] TRUE ## ## [[3]] ## [1] 1 13 ## attr(,&quot;match.length&quot;) ## [1] 3 3 ## attr(,&quot;index.type&quot;) ## [1] &quot;chars&quot; ## attr(,&quot;useBytes&quot;) ## [1] TRUE # This finds starting position and length of all matches stringr::str_locate(string, pattern) ## start end ## [1,] 10 12 ## [2,] NA NA ## [3,] 1 3 # This finds starting and end position of first match stringr::str_locate_all(string, pattern) ## [[1]] ## start end ## [1,] 10 12 ## ## [[2]] ## start end ## ## [[3]] ## start end ## [1,] 1 3 ## [2,] 13 15 # This finds starting and end position of all matches It seems like dates and combined alphanumeric strings are frequently subjected to the gaze of grep and company. string2 &lt;- c(&quot;123.abc&quot;, &quot;09/28/2020&quot;, &quot;ABC..123&quot;, &quot;...&quot;) grep(pattern = &quot;[a-z]+&quot;, x = string2) ## [1] 1 grepl(pattern = &quot;[a-z]+&quot;, x = string2) ## [1] TRUE FALSE FALSE FALSE From the Intermediate R DataCamp course: rand_w &lt;- c(&quot;A_2_4b3c&quot;, &quot;Gi2/3_5&quot;) sub(pattern = &quot;[a-zA-Z]&quot;, replacement = &quot;X&quot;, x = rand_w) ## [1] &quot;X_2_4b3c&quot; &quot;Xi2/3_5&quot; # sub replaces only the 1st instance of the match per string gsub(pattern = &quot;[a-zA-Z]&quot;, replacement = &quot;X&quot;, x = rand_w) ## [1] &quot;X_2_4X3X&quot; &quot;XX2/3_5&quot; # gsub replaces all instances of the match per string stringr markedly alters the base R process. To get a handle on it, R4DS comes to the rescue. For instance. Special characters have to be escaped. These include, \", ', \\, \\n, \\t. For a complete list of these characters, see ?\"'\". string1 &lt;- &quot;This is a string&quot; double_quote &lt;- &quot;\\&quot;&quot; # or &#39;&quot;&#39; x &lt;- c(&quot;\\&quot;&quot;, &quot;\\\\&quot;) x ## [1] &quot;\\&quot;&quot; &quot;\\\\&quot; writeLines(x) ## &quot; ## \\ "]]
